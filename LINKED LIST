
//LINKED LIST
#include <iostream>
using namespace std;

struct Node{
    int data;
    struct Node* next;
    Node ( int x){
        data=x;
        next=NULL;
    }
    
};

//iterative printing
void printlist(Node *head){
    Node* curr=head;
    while(curr!=NULL){
        cout<<curr(data)<<" ";
        curr=curr->next;
    }
}

//recursive printing 
void rprint(Node* head){
    if(head=NULL){
        return;
    }
    cout<<head->data<<" ";
    rprint(head->next);
}

//insert at begin of LL
Node* insertbegin(Node *head, int x){
    Node* temp=new Node(x);
    temp->next=head;
    return temp;
    
}

//insert at end of LL
Node* insertend(Node *head, int x){
    Node* temp3=new Node(x);
    if (head==NULL){
        return temp3;
    }
    Node *curr=head;
    while(curr->next!=NULL){
        curr=curr->next;
    }
    curr->next=temp3;
    return;
}

//delete node from start
Node* delhead(Node*head){
    if(head==NULL){
        return NULL;
    }
    else{
        Node*temp=head->next;
        delete head;
        return temp;
    }
}

//delete node from end
Node* delendnode(Node*head){
    if (head==NULL){
        return NULL;
    }
    if(head->next==NULL){
        delete head;
        return NULL;
    }
    else{
        Node*curr1=head;
        while(curr1->next!=NULL){
            curr1=curr1->next;
        }
        delete (curr1->next);
        curr1->next=NULL;
        return head;
    }
}

//insert at given position in LL
Node* insertpos(Node*head,int pos, int dat){
        Node* temp=new Node(dat);
        if(pos==1){
            temp->next=head;
            return head;
        }
        Node*curr=head;
        for(int i=1;i<=pos-2&&curr!=NULL;i++){
            curr=curr->next;
        }
        if(curr==head){
            return head;
        }
        temp->next=curr->next;
        curr->next=temp;
        return head;
}

//search in a LL
int searchLL(Node*head,int dat){
    int pos=1;
    Node* curr=head;
    while(curr!=NULL){
        if(curr->data=dat){
            return pos;
        }
        else{
            pos++;
            curr=curr->next;
        }
        return -1;    
    }
}

//recursive search in LL

int rec_search(Node*head,int dat){
    if(head==NULL){
        return -1;
    }
    if(head->data=x){
        return 1;
    }
    else{
        res=rec_search(head->next,x)
        if(res==-1)
            return -1;
        else{
            return (res+1);
        }    
    }
}
    




int main(){
    Node *head=new Node(10);
    Node *temp1=new Node(20);
    Node *temp2=new Node(30);
    head->next=temp1;
    temp1->next=temp2;
    head->next->next->next=new Node(40);
    
    head=inertbegin(head,80);
    head=inertbegin(head,90);
    head=inertbegin(head,50);
    
    printlist(head);
    return 0;
}
    void push_back(int data){
        if(head=NULL){
            Node* n=new Node(data);
            head=tail=n;
        }
        else{
            Node* n=new Node(data);
            tail->next=n;
            tail=n;
        }
}
