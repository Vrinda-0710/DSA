//IMPLEMENTING QUEUE USING ARRAY 

//front will be at 0 ad rear at size-1

//SIMPLE IMPLEMENTATION (ARRAY)

struct Queue{
    int size; //size is current size of the queue i.e how many elements does it hold
    int cap; //cap is the total capacity of the queue 
    int *arr;
    
    Queue(int c){
        cap=c;
        size=0;
        arr= new int[cap];
    }
    
    bool isFull(){
        return (size==cap);
    }
    bool isEmpty(){
        return (size==0);
    }
    
    //O(n) complexity 
    void enqueue(int x){
        if(isFull()){
            return;
        arr[size] = x;
        size++;
        
        }
    }
    //O(n) complexity 
    void dequeue(){
        if(isEmpty()){
            return;
        }
        for(int i=0;i<size-1;i++){
            arr[i]=arr[i+1];
            size--;
        }
    }
};

//EFFICIENT IMPLEMENTATION (CIRCULAR ARRAY )


//linked list IMPLEMENTATION of Queue
struct Node{
    int data;
    Node* next;
    Node(int x){
        data=x;
        next=NULL;
        
    }
};

struct Queue{
    Node* front;
    Node* rear;
    Queue(){
        front=NULL;
        rear=NULL;
    }
    void enqueue(int x){
    Node* temp=new Node(x);
    if (front==NULL){
        rear=front=temp;
        return;
    }
    rear->next=tmp;
    rear=temp;
    }
    void dequeue(){
        if(front==NULL){
            return;
        }
        Node* temp=front;
        front=front->next;
        if(front==NULL){
            rear=NULL;
        }
        delete(temp);
    
}
};

//IMPLEMENTATION OF STACK USING QUEUE 
//WE ARE ONLY GIVEN THE QUEUE LIBRARY 

struct Stack{
    queue<int> q1, q2; //creating queue
    int top(){
        return q1.front();
    }
    int size(){
        return q1.size();
    }
    int pop(){
        return q1.front();
    }
    void push(int x){
        while(q1.empty()==false){
            q2.push(q1.front());
            q1.pop();
        }
        q1.push(x);
        while(q2.empty()==false){
            q1.push(q2.front());
            q2.pop();
        }
        
    }
}

//given a queue REVERSE it !!

//iterative idea- traverse through every item of the queue,put it in the stack and then pop it all and put it back into the queue


void reverse (queue <int> &q){
    stack <int> s;
    while(q.empty()==false){
        s.push(q.top());
        q.pop();
    }
    while(s.empty()==false){
        q.push(s.top());
        s.pop();
    }
}

//recursive way 
//idea- remove the top element...reverse the remaining queue at then add back the removed top

void rec_reverse (queue <int> &q){
    if(q.empty()){
        return;
    }
    int x=q.top(){
        q.pop();
        rec_reverse(q);
        q.push(x);
    }


//Given a number n print the first n numbers (in increasing order) such that the numbers have the digits in teh set {5,6}

//Sol-> we consider the numbers 5 and 6 to be string literals and we use queue to implement the solution
//we initially make a queue with 5 and 6 as the only elements
//input-> n=10
//output-> 5,6,55,56,65,66,555,556,565,566
void printFirstN(int n){
    queue<int> q;
    q.push("5");
    q.push("6");
    (int count=0;count<n;count++){
        string curr=q.top();
        cout<<curr<<endl;
        q.pop();
        q.push(curr+"5");
        q.push(curr+"6");
        
    }
}


