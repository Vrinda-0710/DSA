//SIZE OF BINARY TREE 

//number of nodes=size of binary TREE

int getSize(Node* root){
    if(root==NULL){
        return 0;
    }
    else{
        return (1+getSize(root->left)+etSize(root->right));
    }
}//time complexity -O(n)
//auxiliary space-O(h)


//FIND THE MAXIMUM IN BINARY TREE ( VALUE OF NODE )

int getMax(Node* root){
    if(root==NULL){
        return INT_MIN;
    }
    else{
        return max(root,max((getMax(root->left),getMax(root->right)));
    }
}
//time complexity-O(n)
//auxiliary space-O(h)




//print left view of binary TREE

